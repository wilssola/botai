generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

plugin prisma {
    provider = "@core/prisma"
    generateArgs = "--no-engine"
}

enum UserRole {
    ADMIN
    USER
}

enum UserTier {
    FREE
    PREMIUM_1
}

model User {
    id         String      @id @default(dbgenerated("gen_random_uuid()"))

    username   String      @unique
    email      String      @unique

    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    password   Password?
    mailAuth   MailAuth?
    botSession BotSession?

    role       UserRole    @default(USER)
    tier       UserTier    @default(FREE)

    @@allow('all', auth().role == ADMIN && auth().id != id)
    @@allow('read', auth().id == id)
    @@allow('update', auth().id == id && mailAuth.verified == true)
    @@allow('delete', auth().id == id && mailAuth.verified == true)
}

model Password {
    hash   String

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow('update', auth().id == user.id && user.mailAuth.verified == true)
}

model MailAuth {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))

    code      String
    verified  Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum BotStatus {
    OFFLINE
    ONLINE
}


model BotSession {
    id         String       @id @default(dbgenerated("gen_random_uuid()"))

    enabled    Boolean      @default(true)
    whatsappQr String?

    enableAi   Boolean      @default(false)
    promptAi   String?

    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt

    state      BotState?
    commands   BotCommand[]

    userId     String       @unique
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow('read', auth().id == user.id && user.mailAuth.verified == true)
    @@allow('update', auth().id == user.id && user.mailAuth.verified == true)
}

model BotState {
    id        String     @id @default(dbgenerated("gen_random_uuid()"))

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    status    BotStatus  @default(OFFLINE)

    sessionId String     @unique
    session   BotSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@allow('read', auth().id == session.userId && session.user.mailAuth.verified == true)
}

model BotCommand {
    id        String       @id @default(dbgenerated("gen_random_uuid()"))

    name      String
    inputs    String[]
    output    String
    enableAi  Boolean      @default(false)
    promptAi  String?
    priority  Int          @default(0)

    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    parentId  String?
    parent    BotCommand?  @relation("BotCommandChildren", fields: [parentId], references: [id])
    children  BotCommand[] @relation("BotCommandChildren")

    sessionId String
    session   BotSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@allow('all', auth().id == session.userId && session.user.mailAuth.verified == true)
}