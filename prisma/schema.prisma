//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum UserTier {
  FREE
  PREMIUM_1
}

enum BotStatus {
  OFFLINE
  ONLINE
}

/// @@allow('all', auth().role == ADMIN && auth().id != id)
/// @@allow('read', auth().id == id)
/// @@allow('update', auth().id == id)
/// @@allow('delete', auth().id == id)
model User {
  id         String      @id() @default(dbgenerated("gen_random_uuid()"))
  username   String      @unique()
  email      String      @unique()
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  botSession BotSession?
  password   Password?
  role       UserRole    @default(USER)
  tier       UserTier    @default(FREE)
}

/// @@allow('update', auth().id == user.id)
model Password {
  hash   String
  userId String @unique()
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == user.id)
/// @@allow('update', auth().id == user.id)
model BotSession {
  id         String       @id() @default(dbgenerated("gen_random_uuid()"))
  enabled    Boolean
  whatsappQr String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
  commands   BotCommand[]
  userId     String       @unique()
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  state      BotState?
}

/// @@allow('all', auth().id == session.userId)
model BotCommand {
  id        String       @id() @default(dbgenerated("gen_random_uuid()"))
  input     String?
  output    String
  enableAI  Boolean
  promptAI  String?
  priority  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  parentId  String?
  parent    BotCommand?  @relation("BotCommandChildren", fields: [parentId], references: [id])
  children  BotCommand[] @relation("BotCommandChildren")
  sessionId String
  session   BotSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([input, sessionId])
  @@unique([priority, sessionId])
}

model BotState {
  id        String     @id() @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  status    BotStatus  @default(OFFLINE)
  sessionId String     @unique()
  session   BotSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}
